# sentinel_quicklook.py
# On-demand dossier + AI analysis runner for specific tickers.

import argparse
import json
import sys
import textwrap
from datetime import datetime

try:
    import main_script
except ImportError as exc:
    print("ERROR: Could not import main_script.py. "
          "Ensure this script resides in the same directory or that "
          "the project root is on PYTHONPATH.")
    raise exc


def format_optional(value, fmt="{:,.2f}", fallback="N/A"):
    if value is None:
        return fallback
    try:
        return fmt.format(value)
    except Exception:
        return str(value)


def build_position_lookup(api):
    try:
        positions = api.list_positions()
    except Exception as exc:
        print(f"Warning: failed to fetch positions ({exc}); assuming none.")
        return {}
    return {pos.symbol.upper(): pos for pos in positions}


def summarize_dossier(dossier):
    tech = dossier.get("technicals", {})
    fundamentals = dossier.get("fundamentals", {})
    pos_ctx = dossier.get("position_context", {})
    headlines = dossier.get("news_headlines", [])

    lines = []
    lines.append(f"Company: {dossier.get('company_name', dossier['symbol'])}")
    lines.append(f"Latest close: ${format_optional(tech.get('latest_close'))}")
    lines.append(
        "Price change: 1D "
        f"{format_optional(tech.get('one_day_change_pct'), '{:+.2f}%')} | "
        f"20D {format_optional(tech.get('twenty_day_change_pct'), '{:+.2f}%')} | "
        f"60D {format_optional(tech.get('sixty_day_change_pct'), '{:+.2f}%')}"
    )
    lines.append(
        "Moving averages: "
        f"SMA20 {format_optional(tech.get('sma_20'))} | "
        f"SMA50 {format_optional(tech.get('sma_50'))} | "
        f"SMA200 {format_optional(tech.get('sma_200'))}"
    )
    lines.append(f"RSI(14): {format_optional(tech.get('rsi_14'))}")
    lines.append(
        f"52-week range: "
        f"{format_optional(tech.get('fifty_two_week_low'))} ? "
        f"{format_optional(tech.get('fifty_two_week_high'))}"
    )
    lines.append(
        "Fundamentals: "
        f"Sector={fundamentals.get('sector', 'N/A')} | "
        f"Industry={fundamentals.get('industry', 'N/A')} | "
        f"Forward PE={format_optional(fundamentals.get('forward_pe'))} | "
        f"Trailing PE={format_optional(fundamentals.get('trailing_pe'))} | "
        f"Profit margins={format_optional(fundamentals.get('profit_margins'), '{:.2%}')}"
    )
    if pos_ctx.get("currently_held"):
        lines.append(
            f"Sentinel currently holds {format_optional(pos_ctx.get('current_shares'), '{:,.6f}')} "
            f"shares (~${format_optional(pos_ctx.get('current_value'))}, "
            f"{format_optional(pos_ctx.get('current_weight'), '{:.2%}')} weight). "
            f"Prior conviction: {pos_ctx.get('prior_conviction', 'N/A')}"
        )
    else:
        lines.append("Sentinel does not currently hold this ticker.")

    lines.append("Recent headlines:")
    for headline in headlines[:3]:
        wrapped = textwrap.fill(f"- {headline}", subsequent_indent="  ")
        lines.append(wrapped)

    return "\n".join(lines)


def summarize_analysis(analysis):
    rationale = analysis.get("rationale", "")
    if isinstance(rationale, str):
        rationale_text = rationale
    else:
        rationale_text = " | ".join(str(item) for item in rationale)
    return (
        f"AI Decision: {analysis.get('decision', 'N/A')} | "
        f"Conviction: {analysis.get('conviction_score', 'N/A')}\n"
        f"Rationale: {rationale_text}"
    )


def run_quicklook(symbols):
    api = main_script.get_alpaca_api()

    try:
        account = api.get_account()
        portfolio_value = float(account.portfolio_value)
    except Exception as exc:
        print(f"ERROR: Could not retrieve Alpaca account info ({exc}).")
        return

    position_lookup = build_position_lookup(api)
    market_context = (
        "QuickLook run at "
        f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S %Z')}. "
        "Macro summary not fetched; interpret conviction with caution."
    )

    dossiers = main_script.aggregate_data_dossiers(
        api=api,
        universe=symbols,
        market_news_summary=market_context,
        current_positions=position_lookup,
        portfolio_value=portfolio_value,
    )

    if not dossiers:
        print("No dossiers were generated; check ticker spellings or data availability.")
        return

    for symbol in symbols:
        symbol_upper = symbol.upper()
        dossier = dossiers.get(symbol_upper)
        print("=" * 72)
        print(f"Symbol: {symbol_upper}")
        if not dossier:
            print("  • No dossier created (missing data or API error).")
            continue

        print(summarize_dossier(dossier))
        print()
        analysis = main_script.get_ai_analysis(dossier, market_context)
        if analysis:
            print(summarize_analysis(analysis))
        else:
            print("AI analysis unavailable for this ticker.")
        print("=" * 72)
        print()


def main():
    parser = argparse.ArgumentParser(
        description="Run Sentinel-style dossiers and AI analysis for specific tickers."
    )
    parser.add_argument(
        "tickers",
        nargs="+",
        help="One or more ticker symbols (e.g., AAPL MSFT NVDA).",
    )
    args = parser.parse_args()

    symbols = [ticker.strip().upper() for ticker in args.tickers]
    if not symbols:
        print("No tickers provided. Exiting.")
        sys.exit(1)

    print("Sentinel QuickLook starting...")
    print(f"Tickers requested: {', '.join(symbols)}")
    print()
    run_quicklook(symbols)
    print("Sentinel QuickLook finished.")


if __name__ == "__main__":
    main()