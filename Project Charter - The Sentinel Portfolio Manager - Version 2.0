Project Charter: The "Sentinel" Portfolio Manager (Version 2.0)
This document outlines the finalized design, requirements, and collaborative framework for a semi-automated, AI-driven swing trading system, codenamed "Sentinel." This charter serves as the governing blueprint for the project.
Part I: Project Definition & Architecture
Core Goal and Philosophy
The primary goal is to create a robust, resilient, and manageable portfolio management system, not simply to generate profit. It must function reliably on local, monitored hardware and be designed to fail safely in the event of hardware failure or prolonged user absence. The system's philosophy is "AI-Maximalist, Code-Minimalist," meaning it will leverage specialized AI models for complex analysis (strategy, sentiment, pattern recognition) while using simple, auditable code for structured tasks (data handling, calculation, execution). The user acts as the final executive authority, approving or denying the system's daily strategic plan.
Guiding Principles & Core Rules
The entire architecture is built upon a foundation of non-negotiable rules.
Local-Only Operation: The system must run exclusively on the user-approved and probation-monitored laptop. No cloud servers, virtual machines, or unmonitored remote processes are permitted.
Human-in-the-Loop Approval: The system is semi-automated. It will analyze and propose a plan, but it will never execute trades without explicit user approval via a single-character SMS response ("A" for Approve, "D" for Decline).
Default to Safety: In the absence of user approval by a set deadline (e.g., midnight), the system will default to the safest action: placing no trades.
Portfolio-Centric Logic: The system is a portfolio manager. It analyzes its current holdings, constructs an ideal future portfolio, and generates the necessary rebalancing trades to bridge the gap, ensuring sound capital allocation principles will be followed at all times.
Autonomous Fail-Safe ("Dead Man's Switch"): If the system does not receive user input for a predefined period of three (3) days, it will autonomously execute a pre-defined Emergency Protocol. This protocol consists of placing a protective 10% trailing stop-loss order on each current position and ceasing all further operations until manually reset by the user.
State-Aware & Crash-Resilient: The system must be able to recover gracefully from hardware crashes and reboots. It will use a local state file and database to understand its last completed action and will handle "first run" scenarios (e.g., no state file, no trade history) without error.
System Architecture: The End-of-Day Workflow
The system is architected with a "Bare Minimum" file structure to ensure simplicity and robustness, consisting of two primary scripts and a configuration file. The main workflow is executed by main_script.py once per day after market close, triggered by the local operating system's scheduler.
Stage 0: State & Performance Review. The script begins by reading a local state file to confirm its last action. It connects to the Alpaca API to fetch account status and positions. It then queries a local SQLite database to calculate and format the daily and Year-to-Date performance report.


Stage 1: Candidate Universe Generation. The script performs a broad, code-based filter of the US equity market to create a "watchlist" of 100-200 stocks meeting basic criteria (e.g., price, volume, liquidity, and volatility). It automatically includes all currently held positions in this watchlist for re-evaluation.


Stage 2: Data Dossier Aggregation. For each stock on the watchlist, the script assembles a data "dossier."


Technical & Fundamental Data: Historical price/volume data is pulled from Alpaca and fundamental metrics are pulled from yfinance. To prevent library conflicts, this will be done within a Python Virtual Environment (venv).
News & Sentiment Data: In a key architectural change, the system will make a single API call to the Perplexity API for each stock. The prompt to Perplexity will instruct it to act as a financial analyst, find relevant recent news, and return a summary along with quantitative metrics like a "News Sentiment Score" (-1.0 to +1.0).
Stage 3: Ideal Portfolio Construction. The script sends the collection of dossiers to a powerful AI model (e.g., OpenAI's GPT-4). The "master prompt" instructs the AI to act as a portfolio manager, analyze all candidates, and return a ranked list of the best 5-25 stocks. The AI's role is purely strategic: to identify which stocks to own and to rank them with a "conviction score."


Stage 4: Trade Plan Formulation & Rebalancing. This stage uses pure code to translate the AI's strategic vision into actionable orders. It takes the AI's conviction scores and applies mathematical rules for capital allocation (e.g., the 90% invested capital rule, risk-per-trade limits) to determine the target dollar value for each position. It then compares this to the current portfolio and generates the precise BUY/SELL orders.


Stage 5: Approval & Execution. The script formats the performance report and trade plan into a text message and sends it via Twilio. A separate, continuously running script (webhook_listener.py) waits for the user's "A" or "D" reply. Upon receiving "A," it triggers the execution of the pre-calculated orders via the Alpaca API.


Part II: Required Resources
Accounts & API Access (Pre-Development Checklist):
Alpaca Markets Account: For paper and live trading API keys. (Status: Complete)
OpenAI API Account: For access to GPT models for strategic analysis. (Status: Complete)
Perplexity API Account: For web-enabled news aggregation and sentiment analysis. (Status: To-Do)
Twilio Account: For programmatic SMS communication. (Status: To-Do)
GitHub Account: For version control. (Status: Complete)
Gmail Account: For error logging fallbacks. (Status: Complete)
Software & Local Installations:
Python: Version 3.9 or newer. (Status: Complete)
Plain Text Editor: NoteTab Lite is the user's chosen editor.
Git: For version control. (Status: Complete)
Python Virtual Environment (venv): This is a mandatory component for managing project dependencies and preventing library conflicts.
Python Libraries: A requirements.txt file will be provided for one-command installation (pip install -r requirements.txt). Libraries will include alpaca-trade-api, twilio, openai, perplexity-ai, pandas, pandas-ta, yfinance, Flask, and sqlite3.
Part III: Project Magnitude & User Role
This remains a significant but achievable project, estimated at 3-5 months of dedicated, part-time effort to reach a stable "Version 1.0" for paper trading. Progress may occur in fits and starts, which the modular design accommodates.
User Role: The System Integrator
The user is not expected to be a programmer. The user's role is that of a Project Manager and System Integrator. This involves:
Following precise, step-by-step instructions for setup and execution.
Managing all API accounts and secret keys.
Executing commands in the Windows terminal (e.g., running scripts, installing libraries, using Git).
Performing exact copy-paste-save operations to update code files.
Acting as the "keeper of the project's state" by providing the most current version of a script when modifications are needed.
Part IV: An Honest Appraisal of Success
Success is contingent upon adherence to the collaborative framework defined in this charter. The AI (myself) will act as the architect and code generator, providing complete, tested components. The user will act as the hands-on operator, assembling and running the system on the local machine. This division of labor is viable and mitigates the primary risks of technical complexity and miscommunication.
Part V: Summary of Our Agreement
This section codifies our working contract to ensure clarity and prevent project deviation.
Workflow: The primary workflow for code changes will be full file replacement. The user will provide the complete, current version of a script file. The AI will return the complete, modified version of that same file. There will be no partial edits or "streamlining."
Tooling: The user will use NoteTab Lite. The AI will provide code as plain text. Perplexity API will be used for news analysis. A Python Virtual Environment (venv) is mandatory for managing dependencies.
File Structure: The project will be strictly limited to the "Bare Minimum" three-file structure:
config.py (for secret keys)
main_script.py (for the daily planning logic)
webhook_listener.py (for the SMS response logic)
Division of Roles: The AI is the Architect and Coder. The user is the Project Manager and System Integrator.
Governing Document: This Project Charter (Version 2.0) is the official blueprint. The user will maintain a copy and can present it to enforce the agreed-upon plan if deviations occur.
